openapi: 3.0.0
info:
  title: Edgex Foundry - Core Data API
  description: This is the definition of the API for the Core Data service in the EdgeX Foundry IOT microservice platform. Core Data is responsible for storing event and reading data ingested from edge devices in the environment.
  version: 2.x
  
servers:
  - url: http://localhost:48080/api/v2
    description: URL for local development and testing
  
components:
  schemas:
    AddEventRequest:
      allOf:
        - $ref: '#/components/schemas/CorrelatedRequest'
      description: "A request for ingesting a new event/reading data"
      type: object
      properties:
        device:
          description: "The name of the device from which the event originated"
          type: string
        origin:
          description: "A Unix timestamp indicating when the event was originated at the source device (can support nanoseconds)"
          type: integer
        readings:
          description: "One or more readings captured at the time of the event"
          type: array
          items:
            $ref: '#/components/schemas/BaseReading'
      required:
        - device
        - origin
        - readings
    AddEventResponse:
      allOf:
        - $ref: '#/components/schemas/CorrelatedResponse'
      description: "A response type for use in adding a new Event. The ID of the new record will be returned to the caller. An optional message property allows for miscellaneous information to be returned."
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
      required:
        - id
    BaseReading:
      description: "A base reading type containing common properties from which more specific reading types inherit. This definition should not be implemented but is used elsewhere to indicate support for a mixed list of simple/binary readings in a single event."
      type: object
      properties:
        created:
          description: "A Unix timestamp indicating when (if) the reading was initially persisted to a database."
          type: integer
        device:
          description: "The name of the device from which the reading originated"
          type: string
        id:
          description: "The unique identifier for the reading"
          type: string
          format: uuid
        labels:
          description: "One or more custom labels that can be assigned to a reading"
          type: array
          items:
            type: string
        modified:
          description: "A Unix timestamp indicating the most recent modification of the reading data in a persistent database."
          type: integer
        origin:
          description: "A Unix timestamp indicating when the reading was originated at the source device (can support nanoseconds)"
          type: integer
        pushed:
          description: "A Unix timestamp indicating when the reading was permanently pushed to a northside app/service"
          type: integer
    BinaryReading:
      description: "An event reading for a binary data type"
      allOf:
        - $ref: '#/components/schemas/BaseReading'
        - type: object
          properties:
            binaryValue:
              description: "If the value of the reading is binary, it will be found in this property as a byte array"
              type: array
              items: 
                type: object
            mediaType:
              description: "E.g. MIME Type, indicates what the content type of the binaryValue property is if it's populated."
              type: string
    CorrelatedResponse:
      description: "Provides the correlation ID originally set via a corresponsing request that can be used for tracing via either REST or pub/sub transport. If used via REST, this value should be the same as that of  the 'correlation-id' HTTP header"
      type: object
      properties:
        correlationId:
          type: string
      required:
        - correlationId
    CorrelatedRequest:
      description: "Provides a correlation ID that can be used for tracing via either REST or pub/sub transport. If used via REST, this value should be the same as that of  the 'correlation-id' HTTP header"
      type: object
      properties:
        correlationId:
          type: string
      required:
        - correlationId
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/CorrelatedResponse'
      description: "A generic response type indicating a failed operation. An optional message property allows for miscellaneous information to be returned back to the caller."
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    EventCountResponse:
      allOf:
        - $ref: '#/components/schemas/CorrelatedResponse'
      description: "Returns an aggregate event count. If the deviceId property is blank then the count is applicable to all events in the database. Otherwise, the count is applicable to the specified device."
      type: object
      properties:
        count:
          type: integer
        deviceId:
          type: string
          format: uuid
      required:
        - count
    Event:
      description: "A discrete event containing one or more readings"
      properties:
        created:
          description: "A Unix timestamp indicating when (if) the event was initially persisted to a database."
          type: integer
        device:
          description: "The name of the device from which the event originated"
          type: string
        id:
          description: "The unique identifier for the event"
          type: string
          format: uuid
        modified:
          description: "A Unix timestamp indicating the most recent modification of the event data in a persistent database."
          type: integer
        origin:
          description: "A Unix timestamp indicating when the event was originated at the source device (can support nanoseconds)"
          type: integer
        pushed:
          description: "A Unix timestamp indicating when the event was permanently pushed to a northside app/service"
          type: integer
        readings:
          description: "One or more readings captured at the time of the event"
          type: array
          items:
            $ref: '#/components/schemas/BaseReading'
    ReadingCountResponse:
      allOf:
        - $ref: '#/components/schemas/CorrelatedResponse'
      description: "Returns an aggregate reading count. If the deviceId property is blank then the count is applicable to all readings in the database. Otherwise, the count is applicable to the specified device."
      type: object
      properties:
        count:
          type: integer
        deviceId:
          type: string
          format: uuid
      required:
        - count
    SimpleReading:
      description: "An event reading for a simple data type"
      allOf:
        - $ref: '#/components/schemas/BaseReading'
        - type: object
          properties:
            floatEncoding:
              description: "Indicates how a float value is encoded, if the value property contains a float."
              type: string
            formatting:
              description: "A format string, if required, for the reading value"
              type: string
            type:
              description: "Indicates the datatype of the value property"
              type: string
            uomLabel:
              description: "A custom unit-of-measure label"
              type: string
            value:
              description: "A string representation of the reading's value"
              type: string
    ValueDescriptor:
      description: "Defines constraints for ingested data via SimpleReadings"
      properties:
        created:
          description: "A Unix timestamp indicating when (if) the value descriptor was initially persisted to a database."
          type: integer
        defaultValue:
          description: "A default value for a value descriptor supporting a simple datatype"
          type: object
        description:
          description: "A simple description supporting the value descriptor"
          type: string
        formatting:
          description: "A format string, if required, for the reading value"
          type: string
        id:
          description: "The unique identifier for the value descriptor"
          type: string
          format: uuid
        labels:
          description: "One or more custom labels that can be assigned to a value descriptor's reading"
          type: array
          items:
            type: string
        max:
          description: "A maximum supported value for a numeric value descriptor"
          type: object
        min:
          description: "A minimum supported value for a numeric value descriptor"
          type: object
        modified:
          description: "A Unix timestamp indicating the most recent modification of the event data in a persistent database."
          type: integer
        name:
          description: "A unique name identifying the value descriptor"
          type: string
        type:
          description: "Indicates the datatype of readings associated with the value descriptor"
          type: string
        uomLabel:
          description: "A custom unit-of-measure label"
          type: string
  responses:
    BadRequest:
      description: "Request is in an invalid state"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: "The provided request conflicts with existing data"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: "The requested resource does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: "An unexpected error occurred on the server"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: "The number of items to skip before starting to collect the result set."
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: "The numbers of items to return."
paths:
  /event:
    post:
      summary: "Allows for the ingestion of event/reading data"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEventRequest'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddEventResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: "The device in the AddEventRequest does not exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/all:
    parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of events sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Event'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/id/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns an event by ID"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: "Deletes an event by ID"
      responses:
        '204':
          description: "success no body returned"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/checksum/{checksum}/pushed:
    parameters:
    - name: checksum
      in: path
      required: true
      schema:
        type: string
      description: "checksum value of the event provided by core-data via the message bus"
    put:
      summary: "For an event with the supplied checksum value, update the pushed time indicating successful propogation to northside apps/services."
      responses:
        '204':
          description: "success no body returned"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/count:
    get:
      summary: "Return a count of all of events currently stored in the database."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCountResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/count/device/{deviceId}:
    parameters:
    - name: deviceId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: "Uniquely identifies a given device"
    get:
      summary: "Return a count of all of events currently stored in the database, sourced from the specified device."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCountResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/device/{deviceId}:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: "Uniquely identifies a given device"
    delete:
      summary: "Deletes all events for the specified device"
      responses:
        '204':
          description: "Delete successful"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/device/{deviceId}/all:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: "Uniquely identifies a given device"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given a range of events from the specified device sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/{start}/{end}/all:
    parameters:
      - name: start
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the start of a date/time range"
      - name: end
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the end of a date/time range"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Return a paginated range of events with a create date inside the specified start/end values."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/age/{age}:
    parameters:
      - name: age
        in: path
        required: true
        schema:
          type: integer
        description: "Age in milliseconds since created timestamp for a given event"
    delete:
      summary: "Remove all old events (and associated readings) based on delimiting age"
      responses:
        '204':
          description: "Delete successful"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /event/scrub:
    delete:
      summary: "Remove all pushed events and their associated readings."
      responses:
        '204':
          description: "Delete successful"
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/all:
    parameters:
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given the entire range of readings sorted by last modified descending, returns a portion of that range according to the offset and limit parameters. Readings returned will all inherit from BaseReading but their concrete types will be either SimpleReading or BinaryReading, potentially interleaved."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/BaseReading'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/count:
    get:
      summary: "Return a count of all of readings currently stored in the database."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingCountResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/id/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: "An ID of datatype string, by default a GUID."
    get:
      summary: "Returns a reading by ID"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseReading'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/device/{deviceId}/all:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: "Uniquely identifies a given device"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Given a range of readings from the specified device sorted by last modified descending, returns a portion of that range according to the offset and limit parameters."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/BaseReading'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/uomlabel/{uomLabel}:
    parameters:
      - name: uomLabel
        in: path
        required: true
        schema:
          type: string
        description: "A unit of measure label applied to a SimpleReading type"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Returns a paginated set of SimpleReadings according to their assigned unit of measure (UOM) label. BinaryReadings do not have these and so will not be included in the results."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/SimpleReading'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/label/{label}:
    parameters: 
    - name: label
      in: path
      required: true
      schema:
        type: string
      description: The label of the readings you wish to load.
    - $ref: '#/components/parameters/offsetParam'
    - $ref: '#/components/parameters/limitParam'
    get:
      summary: Returns a paginated list of readings assigned to the specified label.
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/BaseReading'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/type/{type}:
    parameters: 
    - name: type
      in: path
      required: true
      schema:
        type: string
      description: The datatype of a SimpleReading's value property.
    - $ref: '#/components/parameters/offsetParam'
    - $ref: '#/components/parameters/limitParam'
    get:
      summary: Returns a paginated list of SimpleReadings whose value property is of the specified type.
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/SimpleReading'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /reading/{start}/{end}/all:
    parameters:
      - name: start
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the start of a date/time range"
      - name: end
        in: path
        required: true
        schema:
          type: integer
        description: "Unix timestamp indicating the end of a date/time range"
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: "Return a paginated range of readings with a create date inside the specified start/end values."
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/BaseReading'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  
  
    
  